worker_processes auto;
error_log /dev/stdout debug;

events {
    worker_connections 1024;
}

http {
    # Basic Auth пользователи
    auth_basic "Restricted Access";
    auth_basic_user_file /etc/nginx/.htpasswd;

    # Настройки rate limiting
    limit_req_zone $binary_remote_addr zone=all_services:10m rate=5r/s;

    # SSL настройки
    ssl_certificate /etc/nginx/ssl/cert.pem;
    ssl_certificate_key /etc/nginx/ssl/key.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # Gzip compression settings
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Настройки проксирования по умолчанию
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Accept-Encoding "";  # Ensure backend responses aren't already compressed

    server {
        listen ${NGINX_PORT} ssl;
        server_name localhost;
        root /var/www/html;

        # Корневой URL
        location = / {
            index index.html;
            try_files $uri $uri/ =404;
        }

        # Проксирование на различные сервисы с rate limiting
        location = /api/image-search {
            rewrite /api/(.*) /$1 break;
            limit_req zone=all_services burst=5 nodelay;
            proxy_pass http://image-search-service:${IMAGE_SEARCH_SERVICE_PORT};
        }

        location = /api/translate {
            rewrite /api/(.*) /$1 break;
            limit_req zone=all_services burst=5 nodelay;
            proxy_pass http://translate-service:${TRANSLATE_SERVICE_PORT};
        }

        location = /api/prepare-pronunciation {
            rewrite /api/prepare-pronunciation /generate-audio break;
            limit_req zone=all_services burst=5 nodelay;
            proxy_pass http://audio-service-orchestrator:${AUDIO_SERVICE_ORCHESTRATOR_PORT};
        }

        location = /api/add-card {
            rewrite /api/add-card /generate-cards break;
            limit_req zone=all_services burst=5 nodelay;
            proxy_pass http://anki-card-generator-service:${ANKI_GENERATOR_SERVICE_PORT};
        }

        location = /api/generate-answers {
            rewrite /api/(.*) /$1 break;
            limit_req zone=all_services burst=5 nodelay;
            proxy_pass http://llm-service:${LLM_SERVICE_PORT};
        }

        location /disk/ {
            # Strip /disk/ prefix before passing to Yandex
            rewrite ^/disk/(.*) /$1 break;

            proxy_pass https://downloader.disk.yandex.ru;

            # Hide original Referer and set empty one
            proxy_hide_header Referer;
            proxy_set_header Referer "";
            proxy_set_header Host downloader.disk.yandex.ru;

            # Make sure Location headers in 30x redirects remain intact
            proxy_redirect off;  # Disable automatic rewrite of Location headers

            # Critical for chained redirects
            proxy_intercept_errors on;
            recursive_error_pages on;
            error_page 301 302 307 = @handle_redirect;

            # Standard proxy headers
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Optimizations for downloads
            proxy_buffering off;
            proxy_connect_timeout 60s;
            proxy_read_timeout 300s;
        }

        location @handle_redirect {
            # Resolve the redirect location
            resolver 8.8.8.8;  # Google DNS, change if needed
            set $redirect_url "$upstream_http_location";

            # Proxy the request to the new location while keeping /disk/ prefix
            proxy_pass $redirect_url;

            # Maintain headers
            proxy_set_header Host $proxy_host;
            proxy_set_header Referer "";
            proxy_hide_header Referer;

            # Keep buffering off for downloads
            proxy_buffering off;
        }

        # Обработка ошибок
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}